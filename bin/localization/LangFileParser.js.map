{"version":3,"sources":["localization/LangFileParser.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AAEtC;;;GAGG;AACH;IAOC;;;OAGG;IACI,MAAM,CAAC,SAAS,CAAC,QAAgB,EAAE,QAAgB,EAAE,YAAoB;QAE/E,MAAM,IAAI,GAAa,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAa,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAE,CAAC;QAC1E,IAAI,CAAC,MAAM;YACV,MAAM,IAAI,KAAK,CAAC,+DAA+D,QAAQ,EAAE,CAAC,CAAC;QAE5F,KAAK,MAAM,KAAK,IAAI,MAAM,EAC1B;YACC,MAAM,KAAK,GAAqB,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,CAAE,CAAC;YACzE,MAAM,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,KAAK,GAAW,KAAK,CAAC,CAAC,CAAC;iBAC5B,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,EAAE,CAAC;iBAC1C,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,EAAE,CAAC;iBACzC,IAAI,EAAE,CAAC;YAET,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;SACpB;QAED,OAAO,IAAI,CAAC;IACb,CAAC;;AA/BuB,0BAAW,GAAW,iEAAiE,CAAC;AACxF,2BAAY,GAAW,IAAI,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;AACnE,6BAAc,GAAW,yBAAyB,CAAC;AACnD,4BAAa,GAAW,UAAU,CAAC;AAL5D,wCAkCC","file":"LangFileParser.js","sourcesContent":["import { Language } from './Language';\n\n/**\n * Class for parsing `.lang` files\n * @private\n */\nexport class LangFileParser\n{\n\tprivate static readonly _parseBlock: RegExp = /(\\[(\\w+)\\]\\n([\\s\\S]*?))(?=\\n\\n+?(?:## *.*\\n)*\\[\\w+\\]\\n.+|\\n*?$)/;\n\tprivate static readonly _parseBlocks: RegExp = new RegExp(LangFileParser._parseBlock, 'g');\n\tprivate static readonly _stripComments: RegExp = /^(?!$)\\s*##.*\\n|##.*$/gm;\n\tprivate static readonly _trimNewlines: RegExp = /^\\n|\\n$/g;\n\n\t/**\n\t * Parse a given language file string and return a Language\n\t * object containing all the parsed values\n\t */\n\tpublic static parseFile(langName: string, filePath: string, fileContents: string): Language\n\t{\n\t\tconst lang: Language = new Language(langName);\n\t\tconst blocks: string[] = fileContents.match(LangFileParser._parseBlocks)!;\n\t\tif (!blocks)\n\t\t\tthrow new Error(`The given Lang file contains no valid localization strings: ${filePath}`);\n\n\t\tfor (const block of blocks)\n\t\t{\n\t\t\tconst match: RegExpMatchArray = block.match(LangFileParser._parseBlock)!;\n\t\t\tconst raw: string = match[1];\n\t\t\tconst key: string = match[2];\n\t\t\tconst value: string = match[3]\n\t\t\t\t.replace(LangFileParser._stripComments, '')\n\t\t\t\t.replace(LangFileParser._trimNewlines, '')\n\t\t\t\t.trim();\n\n\t\t\tlang.strings[key] = value;\n\t\t\tlang.raw[key] = raw;\n\t\t}\n\n\t\treturn lang;\n\t}\n}\n"],"sourceRoot":"../../src"}