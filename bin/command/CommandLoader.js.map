{"version":3,"sources":["command/CommandLoader.ts"],"names":[],"mappings":";;;;;;;;AAAA,6BAA6B;AAC7B,6BAA6B;AAE7B,kDAAuD;AAKvD;;;GAGG;AACH;IAOC,YAAmB,MAAc;QAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACI,gBAAgB,CAAC,GAAW,EAAE,OAAgB,KAAK;QAEzD,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACxB,MAAM,YAAY,GAAa,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QAE3D,MAAM,cAAc,GAAc,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,wBAAwB,GAAG,EAAE,CAAC,CAAC;QAElD,KAAK,MAAM,IAAI,IAAI,YAAY,EAC/B;YACC,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,MAAM,UAAU,GAAQ,OAAO,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,YAAY,GAAmB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACxE,IAAI,CAAC,YAAY,EACjB;gBACC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,yCAAyC,IAAI,EAAE,CAAC,CAAC;gBACpE,SAAS;aACT;YAED,MAAM,eAAe,GAAY,IAAI,YAAY,EAAE,CAAC;YAEpD,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW;iBAClC,QAAQ,CAAC,eAAe,CAAC,IAAuB,CAAC;gBAClD,SAAS;YAEV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;YAC7D,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC;YACjC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACrC;QAED,KAAK,MAAM,OAAO,IAAI,cAAc;YACnC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAE3C,OAAO,cAAc,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,GAAQ;QAEjC,IAAI,UAA2B,CAAC;QAChC,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,SAAS;YAChD,UAAU,GAAG,GAAG,CAAC;aAEb,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;YACvB,KAAK,MAAM,GAAG,IAAI,IAAI,EACtB;gBACC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,UAAU;oBAAE,SAAS;gBAC1B,IAAI,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,IAAI,KAAK,SAAS;oBAAE,MAAM;aAChE;QAEF,OAAO,UAAU,CAAC;IACnB,CAAC;CACD;AAzEA;IADC,eAAM,CAAC,eAAe,CAAC;8CACU;AAHnC,sCA4EC","file":"CommandLoader.js","sourcesContent":["import * as glob from 'glob';\nimport * as path from 'path';\nimport { Client } from '../client/Client';\nimport { Logger, logger } from '../util/logger/Logger';\nimport { CommandRegistry } from './CommandRegistry';\nimport { Command } from './Command';\nimport { BaseCommandName } from '../types/BaseCommandName';\n\n/**\n * Handles loading all commands from the given Client's commandsDir\n * @private\n */\nexport class CommandLoader\n{\n\t@logger('CommandLoader')\n\tprivate readonly _logger!: Logger;\n\tprivate readonly _client: Client;\n\tprivate readonly _commands: CommandRegistry<any>;\n\n\tpublic constructor(client: Client)\n\t{\n\t\tthis._client = client;\n\t\tthis._commands = client.commands;\n\t}\n\n\t/**\n\t * Load commands from the given directory\n\t * @param {string} dir Directory to load from\n\t * @param {boolean} [base=false] Whether or not the commands being loaded are base commands\n\t * @returns {number} The number of Commands loaded from the directory\n\t */\n\tpublic loadCommandsFrom(dir: string, base: boolean = false): number\n\t{\n\t\tdir = path.resolve(dir);\n\t\tconst commandFiles: string[] = glob.sync(`${dir}/**/*.js`);\n\n\t\tconst loadedCommands: Command[] = [];\n\t\tthis._logger.debug(`Loading commands in: ${dir}`);\n\n\t\tfor (const file of commandFiles)\n\t\t{\n\t\t\tdelete require.cache[require.resolve(file)];\n\t\t\tconst loadedFile: any = require(file);\n\t\t\tconst commandClass: typeof Command = this._findCommandClass(loadedFile);\n\t\t\tif (!commandClass)\n\t\t\t{\n\t\t\t\tthis._logger.debug(`Failed to find Command class in file: ${file}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst commandInstance: Command = new commandClass();\n\n\t\t\tif (base && this._client.disableBase\n\t\t\t\t.includes(commandInstance.name as BaseCommandName))\n\t\t\t\tcontinue;\n\n\t\t\tthis._logger.info(`Loaded command: ${commandInstance.name}`);\n\t\t\tcommandInstance._classloc = file;\n\t\t\tloadedCommands.push(commandInstance);\n\t\t}\n\n\t\tfor (const command of loadedCommands)\n\t\t\tthis._commands._registerInternal(command);\n\n\t\treturn loadedCommands.length;\n\t}\n\n\t/**\n\t * Recursively search for a Command class within the given object\n\t * @private\n\t */\n\tprivate _findCommandClass(obj: any): typeof Command\n\t{\n\t\tlet foundClass!: typeof Command;\n\t\tconst keys: string[] = Object.keys(obj);\n\t\tif (Object.getPrototypeOf(obj).name === 'Command')\n\t\t\tfoundClass = obj;\n\n\t\telse if (keys.length > 0)\n\t\t\tfor (const key of keys)\n\t\t\t{\n\t\t\t\tfoundClass = this._findCommandClass(obj[key]);\n\t\t\t\tif (!foundClass) continue;\n\t\t\t\tif (Object.getPrototypeOf(foundClass).name === 'Command') break;\n\t\t\t}\n\n\t\treturn foundClass;\n\t}\n}\n"],"sourceRoot":"../../src"}